{"version":3,"sources":["Components/chuckjokescategorydisplay.js","Components/chuckjokecategory.js","Components/chuckjokescategorylist.js","Containers/App.js","serviceWorker.js","index.js"],"names":["ChuckjokesCategoryDisplay","console","log","this","props","categoryDisplay","joke","React","Component","ChuckjokesCategory","value","item","onClick","ChuckjokesCategoryList","params","renderReturn","categories","map","i","key","className","App","state","fetch","then","response","json","setState","catch","err","fetchCategories","category","event","loadARandomJoke","target","length","onCategoryDisplayClick","bind","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8NAeeA,G,6KATP,OADAC,QAAQC,IAAIC,KAAKC,OAEbD,KAAKC,MAAMC,gBACP,4BAAKF,KAAKC,MAAME,MAChB,gD,GAPwBC,IAAMC,YCkB/BC,E,uKARP,OACI,4BACI,4BAAQC,MAAOP,KAAKC,MAAMO,KAAMC,QAAST,KAAKC,MAAMQ,SAAUT,KAAKC,MAAMO,W,GAZxDJ,IAAMC,WCsBxBK,E,kDAnBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDA,OAAOA,EAFG,E,qDAKT,IAAD,OAEDC,EAAeZ,KAAKW,OAAOE,WAAWC,KAAI,SAACN,EAAMO,GAAP,OAC3C,kBAAC,EAAD,CAAoBC,IAAKD,EAAGP,KAAMA,EAAMC,QAAS,EAAKE,OAAOF,aAGhE,OACI,wBAAIQ,UAAU,QACTL,O,GAfoBR,IAAMC,WCgE5Ba,E,kDA7Db,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IACDkB,MAAQ,CACXN,WAAY,GACZX,iBAAiB,EACjBC,KAAM,IALS,E,8DASA,IAAD,OAChBiB,MAAM,+CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACJ,EAAKC,SAAS,CAAEX,WAAYU,OAE7BE,OAAM,SAAAC,GAAG,OAAI5B,QAAQC,IAAI2B,Q,0CAI5B1B,KAAK2B,oB,sCAESC,GAAU,IAAD,OACvBR,MAAM,oDAAqDQ,GAC1DP,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACJ,EAAKC,SAAS,CAAErB,KAAMoB,EAAKhB,WAE5BkB,OAAM,SAAAC,GAAG,OAAI5B,QAAQC,IAAI2B,Q,6CAGLG,GACrB7B,KAAKwB,SAAS,CACZtB,iBAAiB,EACjBC,KAAMH,KAAK8B,gBAAgBD,EAAME,OAAOxB,W,+BAM1C,OAAKP,KAAKmB,MAAMN,WAAWmB,OAIzB,yBAAKf,UAAU,OACb,4BAAQA,UAAU,cAChB,kDACA,4EAGF,kBAAC,EAAD,CACEJ,WAAYb,KAAKmB,MAAMN,WACvBJ,QAAST,KAAKiC,uBAAuBC,KAAKlC,QAE5C,kBAAC,EAAD,CACEE,gBAAiBF,KAAKmB,MAAMjB,gBAC5BC,KAAMH,KAAKmB,MAAMhB,QAfd,8C,GAzCKC,IAAMC,WCOJ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAyB,GACLpD,QAAQoD,MAAMA,EAAMC,a","file":"static/js/main.48a5fb31.chunk.js","sourcesContent":["import React from 'react';\n\nclass ChuckjokesCategoryDisplay extends React.Component {\n\n    render() {\n        console.log(this.props);\n        return (\n            this.props.categoryDisplay ? (\n                <h3>{this.props.joke}</h3>\n            ) : <h3>Chuck Norris</h3>\n        )\n    }\n\n}\n\nexport default ChuckjokesCategoryDisplay;","import React from 'react';\n\nclass ChuckjokesCategory extends React.Component {\n    // constructor(props) {\n    //     super(props);\n    //     this.key = props.id;\n    //     this.item = props.item;\n\n    // }\n\n    render() {\n\n        return (\n            <li>\n                <button value={this.props.item} onClick={this.props.onClick}>{this.props.item}</button>\n            </li>\n        );\n    }\n}\n\nexport default ChuckjokesCategory;","import React from 'react';\nimport ChuckjokesCategory from './chuckjokecategory';\n\nclass ChuckjokesCategoryList extends React.Component {\n    \n    constructor(params){\n        super(params);\n        this.params=params;\n    }\n    \n    render() {\n        \n        let renderReturn = this.params.categories.map((item, i) => (\n           <ChuckjokesCategory key={i} item={item} onClick={this.params.onClick} />\n        ));\n\n        return (\n            <ul className=\"menu\">\n                {renderReturn}\n            </ul>\n        )\n    }\n};\n\nexport default ChuckjokesCategoryList;","import React from 'react';\nimport './App.css';\nimport ChuckjokesCategoryDisplay from '../Components/chuckjokescategorydisplay';\nimport ChuckjokesCategoryList from '../Components/chuckjokescategorylist';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      categories: [],\n      categoryDisplay: false,\n      joke: '',\n    }\n  }\n\n  fetchCategories() {\n    fetch('https://api.chucknorris.io/jokes/categories')\n      .then(response => response.json())\n      .then(json => {\n        this.setState({ categories: json });\n      })\n      .catch(err => console.log(err));\n  }\n\n  componentDidMount() {\n    this.fetchCategories();\n  }\n  loadARandomJoke(category){\n    fetch('https://api.chucknorris.io/jokes/random?category='+ category)\n    .then(response => response.json())\n    .then(json => {\n      this.setState({ joke: json.value });\n    })\n    .catch(err => console.log(err));\n   \n  }\n  onCategoryDisplayClick(event) {\n    this.setState({\n      categoryDisplay: true,\n      joke: this.loadARandomJoke(event.target.value),\n    });\n\n  }\n\n  render() {\n    if (!this.state.categories.length) {\n      return <h1>Loading...</h1>\n    }\n    return (\n      <div className=\"App\" >\n        <header className=\"App-header\">\n          <h1>Chuck Norris Jokes</h1>\n          <h2>Click on a category of the folowing choices</h2>\n        </header>\n\n        <ChuckjokesCategoryList\n          categories={this.state.categories}\n          onClick={this.onCategoryDisplayClick.bind(this)}\n        />\n        <ChuckjokesCategoryDisplay\n          categoryDisplay={this.state.categoryDisplay}\n          joke={this.state.joke}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}